/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SimpleTikzPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MathHelper = class {
  // Parse the domain string into min and max values
  static parseDomain(domain) {
    const [min, max] = domain.split(":").map(Number);
    return [min, max];
  }
  static parseTangentPoint(point, domain) {
    const x = Number(point);
    if (isNaN(x)) {
      throw new Error("Invalid tangent point");
    }
    const [min, max] = domain;
    if (x < min || x > max) {
      throw new Error("Tangent point outside domain");
    }
    return x;
  }
  // Calculate derivative of a function at a point
  static calculateDerivative(expression, x) {
    const h = 1e-4;
    const f = new Function("x", `return ${expression.replace(/\^/g, "**")}`);
    return (f(x + h) - f(x)) / h;
  }
  // Find local extrema in a given range
  static findExtrema(expression, domain) {
    const [min, max] = this.parseDomain(domain);
    const h = 1e-4;
    const step = (max - min) / 100;
    const extrema = [];
    const f = new Function("x", `return ${expression.replace(/\^/g, "**")}`);
    for (let x = min + step; x < max - step; x += step) {
      const deriv1 = this.calculateDerivative(expression, x - step);
      const deriv2 = this.calculateDerivative(expression, x);
      const deriv3 = this.calculateDerivative(expression, x + step);
      if (deriv1 < 0 && deriv2 > 0 || deriv1 > 0 && deriv2 < 0) {
        const secondDeriv = (this.calculateDerivative(expression, x + h) - this.calculateDerivative(expression, x)) / h;
        const type = secondDeriv > 0 ? "minimum" : "maximum";
        extrema.push({
          x: Number(x.toFixed(3)),
          y: Number(f(x).toFixed(3)),
          type
        });
      }
    }
    return extrema;
  }
  // Calculate tangent line equation at a point
  // Update calculateTangentLine to handle errors
  static calculateTangentLine(expression, x0) {
    try {
      const f = new Function("x", `return ${expression.replace(/\^/g, "**")}`);
      const y0 = f(x0);
      const slope = this.calculateDerivative(expression, x0);
      return `${slope}*x + ${y0 - slope * x0}`;
    } catch (error) {
      console.error("Error calculating tangent line:", error);
      throw error;
    }
  }
};
var TIKZ_SETTINGS = [
  // Basic Settings
  {
    id: "dimension",
    name: "3D ",
    description: "Wether the graph is in 2D or 3D",
    category: "basic",
    type: "toggle",
    defaultValue: false,
    insertText: (value) => value ? "" : ""
  },
  {
    id: "documentSetup",
    name: "Use pgfplots",
    description: "Wether to include pgfplots package",
    category: "basic",
    type: "toggle",
    defaultValue: true,
    insertText: (value) => value ? "\n\\usepackage{pgfplots}\n\\pgfplotsset{compat=1.16}\n\\begin{document}\n\\begin{tikzpicture}\n \n\\begin{axis}[" : "\n\\begin{document}\n\\begin{tikzpicture}\n "
  },
  {
    id: "title",
    name: "Title",
    description: "Name displayed above graph",
    category: "basic",
    type: "text",
    defaultValue: "My graph: \\(\\sum\\)",
    insertText: (value) => `
  title={${value}},`
  },
  {
    id: "size_x_cm",
    name: "Display size width",
    description: "The width of the final image in cm.",
    category: "basic",
    type: "slider",
    defaultValue: 10,
    min: 1,
    max: 20,
    step: 1,
    insertText: (value) => `
  width={${value}cm},`
  },
  {
    id: "size_y_cm",
    name: "Display size hight",
    description: "The hight of the final image in cm.",
    category: "basic",
    type: "slider",
    defaultValue: 10,
    min: 1,
    max: 20,
    step: 1,
    insertText: (value) => `
  height={${value}cm},`
  },
  {
    id: "show_axis_label",
    name: "Show axis labels",
    description: "Wether to show / hide labels fo axies",
    category: "axis",
    type: "toggle",
    defaultValue: true,
    insertText: (value) => value ? "\n" : ""
  },
  {
    id: "axis_label_x",
    name: "X-Axis Label",
    description: "Name displayed for x-axiswww",
    category: "axis",
    type: "text",
    defaultValue: "x",
    insertText: (value) => `
  xlabel={${value}},`
  },
  {
    id: "axis_label_y",
    name: "Y-Axis Label",
    description: "Name displayed for y-axis",
    category: "axis",
    type: "text",
    defaultValue: "y",
    insertText: (value) => `
  ylabel={${value}},`
  },
  {
    id: "documentClose",
    name: "Document Close",
    description: "Include document closing",
    category: "basic",
    type: "toggle",
    defaultValue: true,
    insertText: (value) => value ? "\n\\end{axis}\n\\end{tikzpicture}\n\\end{document}" : ""
    // remove 
  },
  // Axis Settings
  {
    id: "showAxis",
    name: "Show Axes",
    description: "Display coordinate axes",
    category: "axis",
    type: "toggle",
    defaultValue: true,
    insertText: (value) => value ? "" : ""
  },
  // Grid Settings
  {
    id: "showLargeGrid",
    name: "Show large grid",
    description: "Display large coordinate grid",
    category: "grid",
    type: "toggle",
    defaultValue: false,
    insertText: (value) => value ? "\n   grid=major," : "\n"
  },
  {
    id: "showSmallGrid",
    name: "Show small grid",
    description: "Display small coordinate grid",
    category: "grid",
    type: "toggle",
    defaultValue: false,
    insertText: (value) => value ? "\n grid=both," : ""
  },
  {
    id: "gridSize",
    name: "Grid Size",
    description: "Size of the grid",
    category: "grid",
    type: "slider",
    defaultValue: 5,
    min: 1,
    max: 10,
    step: 1,
    insertText: (value) => `
  minor tick num=${value},`
  },
  {
    id: "xmin",
    name: "X-Axis Min",
    description: "Minimum value for x-axis",
    category: "axis",
    type: "text",
    defaultValue: "-0.5",
    insertText: (value) => `
  xmin=${value},`
  },
  {
    id: "xmax",
    name: "X-Axis Max",
    description: "Maximum value for x-axis",
    category: "axis",
    type: "text",
    defaultValue: "10",
    insertText: (value) => `
  xmax=${value},`
  },
  {
    id: "ymin",
    name: "Y-Axis Min",
    description: "Minimum value for y-axis",
    category: "axis",
    type: "text",
    defaultValue: "-0.5",
    insertText: (value) => `
  ymin=${value},`
  },
  {
    id: "ymax",
    name: "Y-Axis Max",
    description: "Maximum value for y-axis",
    category: "axis",
    type: "text",
    defaultValue: "5",
    insertText: (value) => `
  ymax=${value},`
  },
  {
    id: "axis_allaround",
    name: "Axis all around",
    description: "Weather to have the axis go all around the graph",
    category: "axis",
    type: "toggle",
    defaultValue: true,
    insertText: (value) => value ? "\n]" : " \n  axis lines = middle,\n]"
    //change 
  },
  {
    id: "functions",
    name: "Functions",
    description: "Add mathematical functions to plot",
    category: "function",
    type: "text",
    defaultValue: [],
    values: [],
    insertText: (values) => {
      return values.map((func) => {
        let style = [];
        if (func.dashed) {
          style.push("dashed");
        }
        if (func.fill) {
          style.push(`
fill=${func.color}!20,
fill opacity=0.3`);
        }
        style.push(`${func.color}`);
        style.push(`${func.thickness}`);
        let code = `
\\addplot[domain=${func.domain}, ${style.join(",")}, samples=300] {${func.expression}};`;
        if (func.showLegend) {
          code += `
\\addlegendentry{\\(${func.expression}\\)}`;
        }
        if (func.fill) {
        }
        console.log("tangent");
        console.log(func.tangent);
        console.log("tangentpoint");
        console.log(func.tangentPoint);
        console.log("expression");
        console.log(func.expression);
        console.log("showlegend");
        console.log(func.showLegend);
        console.log("extrema");
        console.log(func.extrema);
        if (func.tangent && func.tangentPoint) {
          try {
            const domain = MathHelper.parseDomain(func.domain);
            const tangentX = MathHelper.parseTangentPoint(func.tangentPoint, domain);
            const tangentExpression = MathHelper.calculateTangentLine(func.expression, tangentX);
            code += `
\\addplot[${func.color}, dashed, domain=${func.domain}] {${tangentExpression}};`;
            const f = new Function("x", `return ${func.expression.replace(/\^/g, "**")}`);
            code += `
\\addplot[${func.color}, only marks] coordinates {(${tangentX},${f(tangentX)})};`;
          } catch (error) {
            console.error("Error calculating tangent:", error);
          }
        }
        if (func.extrema) {
          try {
            const extremaPoints = MathHelper.findExtrema(func.expression, func.domain);
            if (extremaPoints.length > 0) {
              const coordinates = extremaPoints.map((point) => `(${point.x},${point.y})`).join(" ");
              code += `
\\addplot[${func.color}, only marks, mark=*, mark size=4pt] coordinates {${coordinates}};`;
              extremaPoints.forEach((point) => {
                console.log(point.type);
                if (point.type == "minimum")
                  code += `
\\node[below] at (axis cs:${point.x},${point.y - 1}) {${point.type}};`;
                if (point.type == "maximum")
                  code += `
\\node[above] at (axis cs:${point.x},${point.y + 1}) {${point.type}};`;
              });
            }
          } catch (error) {
            console.error("Error calculating extrema:", error);
          }
        }
        return code;
      }).join("\n");
    }
  }
];
var SettingsManager = class {
  constructor() {
    this.values = /* @__PURE__ */ new Map();
    TIKZ_SETTINGS.forEach((setting) => {
      this.values.set(setting.id, setting.defaultValue);
    });
  }
  getValue(id) {
    return this.values.get(id);
  }
  setValue(id, value) {
    this.values.set(id, value);
  }
  generateTikzCode() {
    let code = "";
    const setupSetting = TIKZ_SETTINGS.find((s) => s.id === "documentSetup");
    if (setupSetting && this.getValue("documentSetup")) {
      code += setupSetting.insertText(true);
    }
    const showAxissetup = TIKZ_SETTINGS.find((s) => s.id === "show_axis_label");
    TIKZ_SETTINGS.forEach((setting) => {
      if (setting.id === "documentSetup" || setting.id === "documentClose") {
        return;
      }
      if (setting.id === "gridSize" && !this.getValue("showSmallGrid")) {
        return;
      }
      if ((setting.id === "axis_label_x" || setting.id === "axis_label_y") && !this.getValue("show_axis_label")) {
        return;
      }
      code += setting.insertText(this.getValue(setting.id));
    });
    const closeSetting = TIKZ_SETTINGS.find((s) => s.id === "documentClose");
    if (closeSetting && this.getValue("documentClose")) {
      code += closeSetting.insertText(true);
    }
    return code;
  }
};
var TikzModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
    this.createFunctionControl = (setting, container) => {
      const mainSetting = new import_obsidian.Setting(container).setName(setting.name).setDesc(setting.description);
      const functionsContainer = container.createDiv("functions-container");
      functionsContainer.style.marginLeft = "20px";
      functionsContainer.style.marginTop = "10px";
      const rowStates = /* @__PURE__ */ new Map();
      const addFunctionRow = () => {
        const rowContainer = functionsContainer.createDiv("function-row");
        const rowId = `row-${Date.now()}`;
        rowStates.set(rowId, {
          showLegend: false,
          fill: false,
          tangent: false,
          dashed: false,
          extrema: false,
          expression: "",
          domain: "-10:10",
          color: "black",
          thickness: "thin",
          tangentPoint: ""
        });
        const basicContainer = rowContainer.createDiv("basic-inputs");
        basicContainer.style.display = "flex";
        basicContainer.style.gap = "10px";
        basicContainer.style.width = "100%";
        basicContainer.style.marginBottom = "10px";
        const expressionContainer = basicContainer.createDiv();
        expressionContainer.style.flex = "2";
        const expressionInput = new import_obsidian.Setting(expressionContainer).setName("Expression").setDesc("Trigenometry must be written as sin(deg(x))").addText((text) => {
          text.setPlaceholder("x^2").setValue(rowStates.get(rowId).expression).onChange((value) => {
            const state = rowStates.get(rowId);
            state.expression = value;
            rowStates.set(rowId, state);
            updateFunctionValues();
          });
        });
        const domainContainer = basicContainer.createDiv();
        domainContainer.style.flex = "2";
        const domainInput = new import_obsidian.Setting(domainContainer).setName("Domain").setDesc("Be careful about extrem y values of your function").addText((text) => {
          text.setPlaceholder("-10:10").setValue(rowStates.get(rowId).domain).onChange((value) => {
            const state = rowStates.get(rowId);
            state.domain = value;
            rowStates.set(rowId, state);
            updateFunctionValues();
          });
        });
        const styleContainer = rowContainer.createDiv("style-inputs");
        styleContainer.style.display = "flex";
        styleContainer.style.gap = "10px";
        styleContainer.style.width = "100%";
        styleContainer.style.marginBottom = "10px";
        const colorContainer = styleContainer.createDiv();
        colorContainer.style.flex = "1";
        const colorInput = new import_obsidian.Setting(colorContainer).setName("Color").addDropdown((dropdown) => {
          dropdown.addOptions({
            "black": "Black",
            "red": "Red",
            "blue": "Blue",
            "teal": "Teal",
            "orange": "Orange",
            "green": "Green",
            "purple": "Purple"
          }).setValue(rowStates.get(rowId).color).onChange((value) => {
            const state = rowStates.get(rowId);
            state.color = value;
            rowStates.set(rowId, state);
            updateFunctionValues();
          });
        });
        const thicknessContainer = styleContainer.createDiv();
        thicknessContainer.style.flex = "1";
        const thicknessInput = new import_obsidian.Setting(thicknessContainer).setName("Thickness").addDropdown((dropdown) => {
          dropdown.addOptions({
            "very thin": "Very Thin",
            "thin": "Thin",
            "thick": "Thick",
            "very thick": "Very Thick"
          }).setValue(rowStates.get(rowId).thickness).onChange((value) => {
            const state = rowStates.get(rowId);
            state.thickness = value;
            rowStates.set(rowId, state);
            updateFunctionValues();
          });
        });
        const toggleAndInputContainer = rowContainer.createDiv("toggle-and-input-container");
        toggleAndInputContainer.style.display = "flex";
        toggleAndInputContainer.style.gap = "20px";
        toggleAndInputContainer.style.width = "100%";
        const toggleContainer = toggleAndInputContainer.createDiv("toggle-inputs");
        toggleContainer.style.display = "flex";
        toggleContainer.style.flexWrap = "wrap";
        toggleContainer.style.gap = "20px";
        toggleContainer.style.width = "20%";
        const dynamicInputsContainer = toggleAndInputContainer.createDiv("dynamic-inputs");
        dynamicInputsContainer.style.display = "flex";
        dynamicInputsContainer.style.gap = "20px";
        dynamicInputsContainer.style.flex = "1";
        let tangentPointInput = null;
        const toggles = [
          { name: "Legend", key: "showLegend" },
          { name: "Fill", key: "fill" },
          { name: "Tangent", key: "tangent" },
          { name: "Dashed", key: "dashed" },
          { name: "Extrema", key: "extrema" }
        ];
        toggles.forEach(({ name, key }) => {
          const toggleWrapper = toggleContainer.createDiv();
          toggleWrapper.style.flex = "2";
          toggleWrapper.style.minWidth = "80px";
          const toggleSetting = new import_obsidian.Setting(toggleWrapper).setName(name).addToggle((toggle) => {
            toggle.setValue(rowStates.get(rowId)[key]).onChange((value) => {
              const state = rowStates.get(rowId);
              state[key] = value;
              rowStates.set(rowId, state);
              if (key === "tangent") {
                if (value) {
                  if (!tangentPointInput) {
                    tangentPointInput = dynamicInputsContainer.createDiv();
                    new import_obsidian.Setting(tangentPointInput).setName("Tangent Point").addText((text) => {
                      text.setPlaceholder("x value").setValue(state.tangentPoint).onChange((value2) => {
                        state.tangentPoint = value2;
                        rowStates.set(rowId, state);
                        updateFunctionValues();
                      });
                    });
                  }
                  tangentPointInput.style.display = "block";
                } else {
                  if (tangentPointInput) {
                    tangentPointInput.style.display = "none";
                  }
                }
              }
              updateFunctionValues();
            });
          });
        });
        const removeContainer = rowContainer.createDiv();
        removeContainer.style.width = "100%";
        removeContainer.style.display = "flex";
        removeContainer.style.justifyContent = "flex-end";
        removeContainer.style.marginTop = "10px";
        new import_obsidian.Setting(removeContainer).addButton(
          (btn) => btn.setIcon("trash").setTooltip("Remove function").onClick(() => {
            rowStates.delete(rowId);
            rowContainer.remove();
            updateFunctionValues();
          })
        );
        return {
          rowId,
          expressionInput,
          domainInput,
          colorInput,
          thicknessInput,
          toggleContainer,
          dynamicInputsContainer
        };
      };
      addFunctionRow();
      mainSetting.addButton(
        (btn) => btn.setButtonText("Add Function").onClick(() => {
          addFunctionRow();
        })
      );
      const updateFunctionValues = () => {
        const functions = [];
        rowStates.forEach((state, rowId) => {
          if (state.expression && state.domain) {
            functions.push({
              expression: state.expression,
              domain: state.domain,
              color: state.color,
              thickness: state.thickness,
              showLegend: state.showLegend,
              fill: state.fill,
              tangent: state.tangent,
              tangentPoint: state.tangent ? state.tangentPoint : "",
              dashed: state.dashed,
              extrema: state.extrema
            });
          }
        });
        setting.values = functions;
        this.settings.setValue(setting.id, functions);
      };
    };
    this.tikzCode = "";
    this.settings = new SettingsManager();
  }
  createSettingControl(setting, container) {
    if (setting.id === "functions") {
      this.createFunctionControl(setting, container);
      return;
    }
    if (setting.id === "xmin") {
      const rangeContainer = container.createDiv("axis-range-container");
      this.createAxisRangeInputs(rangeContainer, "x");
      return;
    }
    if (setting.id === "xmax")
      return;
    if (setting.id === "ymin") {
      const rangeContainer = container.createDiv("axis-range-container");
      this.createAxisRangeInputs(rangeContainer, "y");
      return;
    }
    if (setting.id === "ymax")
      return;
    const settingUI = new import_obsidian.Setting(container).setName(setting.name).setDesc(setting.description);
    switch (setting.type) {
      case "toggle":
        settingUI.addToggle((toggle) => {
          toggle.setValue(this.settings.getValue(setting.id)).onChange(async (value) => {
            this.settings.setValue(setting.id, value);
          });
        });
        break;
      case "slider":
        settingUI.addSlider((slider) => {
          slider.setLimits(setting.min, setting.max, setting.step).setValue(this.settings.getValue(setting.id)).setDynamicTooltip().onChange(async (value) => {
            this.settings.setValue(setting.id, value);
          });
        });
        break;
      case "text":
        settingUI.addText((text) => {
          text.setPlaceholder(this.settings.getValue(setting.id)).setValue(this.settings.getValue(setting.id)).onChange(async (value) => {
            this.settings.setValue(setting.id, value);
          });
        });
        break;
      case "dropdown":
        settingUI.addDropdown((dropdown) => {
          var _a;
          (_a = setting.options) == null ? void 0 : _a.forEach((option) => {
            dropdown.addOption(option, option);
          });
          dropdown.setValue(this.settings.getValue(setting.id)).onChange(async (value) => {
            this.settings.setValue(setting.id, value);
          });
        });
        break;
    }
  }
  onOpen() {
    const style = document.createElement("style");
    style.textContent = `
            .style-settings2-collapse-indicator > svg {
                height: 27px;
                width: 27px;
                transition: transform 0.3s ease;
                margin-right: 5px;
                margin-top: 5px;
                fill: #898f9d;
            }
            .axis-range-container {
                display: flex;
                gap: 20px;
             }
            .axis-range-container .setting-item {
                flex: 1;
              }
            .style-settings2-heading.is-collapsed .style-settings2-collapse-indicator > svg {
                transform: rotate(-90deg);
            }
            .tikz-preview-area {
                border: 1px solid var(--background-modifier-border);
                padding: 10px;
                min-height: 150px;
                margin-top: 10px;
            }
            .button-container {
                display: flex;
                gap: 50px; /* Adjust the gap between buttons */
            }
            .setting-container .setting-item-control {
                display: flex;
                gap: 100px; /* Adjust spacing between the buttons */
            }
            .collapsible-content {
                margin-top: 10px;
            }
            .setting-item textarea {
                height: 500px !important;
                width: 500px !important;
                font-family: monospace;
            }
            .tikz-code-area {
                border: 1px solid var(--background-modifier-border);
                background-color: var(--background-primary);
                padding: 10px;
                min-height: 600px;
                min-width: 600px;
                margin-top: 10px;
                font-family: monospace;
                font-size: 14px;
                overflow-y: auto;
            }
            .tikz-result {
                width: 100%;
                margin-top: 20px;
                padding: 20px;
                border: 1px solid var(--background-modifier-border);
                background-color: var(--background-primary);
                display: flex;
                justify-content: center;
                align-items: center;
                min-height: 200px;
            }
       `;
    document.head.appendChild(style);
    const { modalEl } = this;
    const scrollableContainer = this.createScrollableContainer();
    const sections = /* @__PURE__ */ new Map();
    ["basic", "axis", "function", "grid", "shapes"].forEach((category) => {
      sections.set(category, this.createCollapsibleSection(
        scrollableContainer,
        category.charAt(0).toUpperCase() + category.slice(1) + " Settings"
      ));
    });
    const codeSection = this.createCollapsibleSection(scrollableContainer, "Code");
    sections.set("code", codeSection);
    TIKZ_SETTINGS.forEach((setting) => {
      const sectionContainer = sections.get(setting.category);
      if (sectionContainer) {
        this.createSettingControl(setting, sectionContainer);
      }
    });
    this.createCodeSection(codeSection);
  }
  createScrollableContainer() {
    const { modalEl } = this;
    const scrollableContainer = modalEl.createDiv({ cls: "scrollable-container" });
    scrollableContainer.style.maxHeight = "700px";
    scrollableContainer.style.overflowY = "auto";
    scrollableContainer.style.minWidth = "830px";
    modalEl.style.width = "870px";
    scrollableContainer.style.padding = "60px";
    return scrollableContainer;
  }
  createCollapsibleSection(container, title) {
    const header = container.createEl("div", {
      cls: "collapsible-header style-settings2-heading"
    });
    header.style.cursor = "pointer";
    header.style.padding = "10px";
    header.style.borderBottom = "1px solid var(--background-modifier-border)";
    header.style.display = "flex";
    header.style.alignItems = "center";
    const collapseIndicator = header.createDiv({
      cls: "style-settings2-collapse-indicator"
    });
    collapseIndicator.innerHTML = `<svg viewBox="0 0 24 24"><path d="M8 10l4 4 4-4z"></path></svg>`;
    header.createEl("span", { text: title });
    const content = container.createDiv({ cls: "collapsible-content" });
    content.style.padding = "0 50px";
    header.onclick = () => {
      header.classList.toggle("is-collapsed");
      if (header.classList.contains("is-collapsed")) {
        content.style.display = "none";
      } else {
        content.style.display = "block";
      }
    };
    return content;
  }
  createAxisRangeInputs(container, axis) {
    const minSetting = new import_obsidian.Setting(container).setName(`${axis.toUpperCase()}-Axis Range`).addText((text) => {
      text.setPlaceholder(axis === "x" ? "-0.5" : "-0.5").setValue(this.settings.getValue(`${axis}min`)).onChange(async (value) => {
        this.settings.setValue(`${axis}min`, value);
      });
    });
    const maxSetting = new import_obsidian.Setting(container).setName("to").addText((text) => {
      text.setPlaceholder(axis === "x" ? "10" : "5").setValue(this.settings.getValue(`${axis}max`)).onChange(async (value) => {
        this.settings.setValue(`${axis}max`, value);
      });
    });
  }
  createCodeSection(container) {
    new import_obsidian.Setting(container).setName("TikZ Code").addTextArea((text) => {
      this.textArea = text.inputEl;
      text.setPlaceholder("Enter your TikZ code here").onChange((value) => {
        this.tikzCode = value;
      });
    });
    const buttonSetting = new import_obsidian.Setting(container);
    buttonSetting.addButton(
      (btn) => btn.setButtonText("Render").onClick(() => {
        this.renderTikz();
      }).buttonEl.style.marginRight = "50px"
    );
    buttonSetting.controlEl.style.padding = "10px";
    buttonSetting.addButton((btn) => btn.setButtonText("Update").onClick(() => {
      this.updateTikzCode();
    }));
    this.result = container.createDiv();
    this.result.addClass("tikz-result");
  }
  updateTikzCode() {
    const settingsCode = this.settings.generateTikzCode();
    this.tikzCode = settingsCode;
    this.textArea.value = this.tikzCode;
  }
  renderTikz() {
    this.result.empty();
    if (!this.tikzCode.trim()) {
      return;
    }
    const script = this.result.createEl("script");
    script.setAttribute("type", "text/tikz");
    script.setAttribute("data-show-console", "true");
    script.setText(this.tidyTikzSource(this.tikzCode));
  }
  tidyTikzSource(tikzSource) {
    let code = tikzSource.replaceAll("&nbsp;", "");
    let lines = code.split("\n");
    lines = lines.map((line) => line.trim());
    lines = lines.filter((line) => line);
    return lines.join("\n");
  }
};
var SimpleTikzPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addRibbonIcon("square-function", "TikZ Renderer", (evt) => {
      new TikzModal(this.app).open();
    });
    this.app.workspace.onLayoutReady(() => {
      this.loadTikZJax();
    });
  }
  onunload() {
    this.unloadTikZJax();
  }
  async loadTikZJax() {
    try {
      const s = document.createElement("script");
      s.id = "tikzjax";
      s.type = "text/javascript";
      document.body.appendChild(s);
    } catch (error) {
      console.error("Failed to load TikZJax:", error);
    }
  }
  unloadTikZJax() {
    const s = document.getElementById("tikzjax");
    if (s)
      s.remove();
  }
};
//# sourceMappingURL=data:application/json;base64,
